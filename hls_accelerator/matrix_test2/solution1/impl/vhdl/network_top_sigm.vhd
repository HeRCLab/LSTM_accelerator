-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity network_top_sigm is
port (
    ap_ready : OUT STD_LOGIC;
    x_read : IN STD_LOGIC_VECTOR (21 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (21 downto 0) );
end;


architecture behav of network_top_sigm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_BFE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv22_3FFFFF : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111111111";
    constant ap_const_lv22_3FFFCB : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv22_20000 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal bitcast_ln756_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_105_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_fu_115_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln7_fu_123_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_127_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln7_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln7_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_151_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln7_1_fu_167_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln7_3_fu_171_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln7_5_fu_177_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal lshr_ln7_2_fu_181_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln7_3_fu_187_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln7_1_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_2_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_205_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln7_fu_141_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln7_1_fu_219_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal bit_select_i_i_i_fu_225_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln7_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_1_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln7_1_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln7_2_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln7_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln7_1_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln7_1_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln7_2_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln7_3_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln7_fu_273_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln7_fu_289_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln7_fu_245_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln7_fu_295_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln7_3_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln7_3_fu_307_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln7_1_fu_313_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_9_fu_327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln7_2_fu_343_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln7_1_fu_335_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln7_2_fu_347_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln7_4_fu_353_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln7_4_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_359_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal LD_fu_367_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_3_fu_386_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln7_5_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_4_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln7_2_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_84_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_89_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln13_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_2_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_1_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_fu_438_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln13_1_fu_452_p3 : STD_LOGIC_VECTOR (21 downto 0);

    component network_top_dcmp_64ns_64ns_1_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dcmp_64ns_64ns_1_1_no_dsp_1_U23289 : component network_top_dcmp_64ns_64ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => bitcast_ln756_fu_379_p1,
        din1 => ap_const_lv64_BFE0000000000000,
        opcode => ap_const_lv5_2,
        dout => tmp_4_fu_84_p2);

    dcmp_64ns_64ns_1_1_no_dsp_1_U23290 : component network_top_dcmp_64ns_64ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => bitcast_ln756_fu_379_p1,
        din1 => ap_const_lv64_3FE0000000000000,
        opcode => ap_const_lv5_2,
        dout => tmp_6_fu_89_p2);

    dcmp_64ns_64ns_1_1_no_dsp_1_U23291 : component network_top_dcmp_64ns_64ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => bitcast_ln756_fu_379_p1,
        din1 => ap_const_lv64_BFE0000000000000,
        opcode => ap_const_lv5_4,
        dout => tmp_7_fu_94_p2);




    LD_fu_367_p5 <= (tmp_5_fu_359_p3 & zext_ln7_4_fu_323_p1(51 downto 0));
    add_ln7_1_fu_219_p2 <= std_logic_vector(unsigned(trunc_ln7_fu_141_p1) + unsigned(ap_const_lv22_3FFFCB));
    add_ln7_2_fu_263_p2 <= std_logic_vector(unsigned(sub_ln7_fu_135_p2) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln7_3_fu_307_p2 <= std_logic_vector(unsigned(select_ln7_fu_295_p3) + unsigned(zext_ln7_3_fu_303_p1));
    add_ln7_4_fu_353_p2 <= std_logic_vector(unsigned(select_ln7_1_fu_335_p3) + unsigned(sub_ln7_2_fu_347_p2));
    add_ln7_fu_145_p2 <= std_logic_vector(unsigned(sub_ln7_fu_135_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    and_ln10_fu_420_p2 <= (tmp_6_fu_89_p2 and or_ln7_2_fu_408_p2);
    and_ln13_fu_426_p2 <= (tmp_7_fu_94_p2 and or_ln7_2_fu_408_p2);
    and_ln7_1_fu_233_p2 <= (xor_ln7_fu_213_p2 and bit_select_i_i_i_fu_225_p3);
    and_ln7_2_fu_414_p2 <= (tmp_4_fu_84_p2 and or_ln7_2_fu_408_p2);
    and_ln7_3_fu_187_p2 <= (x_read and lshr_ln7_2_fu_181_p2);
    and_ln7_fu_199_p2 <= (icmp_ln7_2_fu_193_p2 and icmp_ln7_1_fu_161_p2);
    ap_ready <= ap_const_logic_1;
    ap_return <= 
        select_ln13_fu_438_p3 when (or_ln13_1_fu_446_p2(0) = '1') else 
        select_ln13_1_fu_452_p3;
    bit_select_i_i_i_fu_225_p3 <= x_read(to_integer(unsigned(add_ln7_1_fu_219_p2)) downto to_integer(unsigned(add_ln7_1_fu_219_p2))) when (to_integer(unsigned(add_ln7_1_fu_219_p2)) >= 0 and to_integer(unsigned(add_ln7_1_fu_219_p2)) <=21) else "-";
    bitcast_ln756_fu_379_p1 <= LD_fu_367_p5;
    icmp_ln7_1_fu_161_p2 <= "1" when (signed(tmp_3_fu_151_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln7_2_fu_193_p2 <= "0" when (and_ln7_3_fu_187_p2 = ap_const_lv22_0) else "1";
    icmp_ln7_3_fu_257_p2 <= "1" when (signed(add_ln7_fu_145_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln7_4_fu_396_p2 <= "0" when (add_ln7_4_fu_353_p2 = ap_const_lv11_7FF) else "1";
    icmp_ln7_5_fu_402_p2 <= "1" when (trunc_ln7_3_fu_386_p4 = ap_const_lv52_0) else "0";
    icmp_ln7_fu_99_p2 <= "1" when (x_read = ap_const_lv22_0) else "0";
    lshr_ln7_1_fu_313_p4 <= add_ln7_3_fu_307_p2(63 downto 1);
    lshr_ln7_2_fu_181_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv22_3FFFFF),to_integer(unsigned('0' & zext_ln7_5_fu_177_p1(22-1 downto 0)))));
    lshr_ln7_fu_273_p2 <= std_logic_vector(shift_right(unsigned(zext_ln7_fu_253_p1),to_integer(unsigned('0' & zext_ln7_1_fu_269_p1(31-1 downto 0)))));
    or_ln13_1_fu_446_p2 <= (or_ln13_fu_432_p2 or and_ln10_fu_420_p2);
    or_ln13_fu_432_p2 <= (icmp_ln7_fu_99_p2 or and_ln13_fu_426_p2);
    or_ln7_1_fu_239_p2 <= (and_ln7_fu_199_p2 or and_ln7_1_fu_233_p2);
    or_ln7_2_fu_408_p2 <= (icmp_ln7_5_fu_402_p2 or icmp_ln7_4_fu_396_p2);
    or_ln7_fu_245_p3 <= (ap_const_lv1_0 & or_ln7_1_fu_239_p2);
    select_ln13_1_fu_452_p3 <= 
        ap_const_lv22_0 when (and_ln7_2_fu_414_p2(0) = '1') else 
        x_read;
    select_ln13_fu_438_p3 <= 
        ap_const_lv22_0 when (or_ln13_fu_432_p2(0) = '1') else 
        ap_const_lv22_20000;
    select_ln7_1_fu_335_p3 <= 
        ap_const_lv11_3FF when (tmp_9_fu_327_p3(0) = '1') else 
        ap_const_lv11_3FE;
    select_ln7_fu_295_p3 <= 
        lshr_ln7_fu_273_p2 when (icmp_ln7_3_fu_257_p2(0) = '1') else 
        shl_ln7_fu_289_p2;
        sext_ln7_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_115_p3),32));

    shl_ln7_fu_289_p2 <= std_logic_vector(shift_left(unsigned(zext_ln7_fu_253_p1),to_integer(unsigned('0' & zext_ln7_2_fu_285_p1(31-1 downto 0)))));
    sub_ln7_1_fu_279_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln7_fu_135_p2));
    sub_ln7_2_fu_347_p2 <= std_logic_vector(unsigned(ap_const_lv11_5) - unsigned(trunc_ln7_2_fu_343_p1));
    sub_ln7_3_fu_171_p2 <= std_logic_vector(unsigned(ap_const_lv5_C) - unsigned(trunc_ln7_1_fu_167_p1));
    sub_ln7_fu_135_p2 <= std_logic_vector(unsigned(ap_const_lv32_16) - unsigned(tmp_2_fu_127_p3));
    tmp_1_fu_115_p3 <= (ap_const_lv1_1 & tmp_fu_105_p4);
    
    tmp_2_fu_127_p3_proc : process(sext_ln7_fu_123_p1)
    begin
        tmp_2_fu_127_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln7_fu_123_p1(i) = '1' then
                tmp_2_fu_127_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_3_fu_151_p4 <= add_ln7_fu_145_p2(31 downto 1);
    tmp_5_fu_359_p3 <= (ap_const_lv1_0 & add_ln7_4_fu_353_p2);
    tmp_8_fu_205_p3 <= add_ln7_fu_145_p2(31 downto 31);
    tmp_9_fu_327_p3 <= add_ln7_3_fu_307_p2(54 downto 54);
    
    tmp_fu_105_p4_proc : process(x_read)
    variable vlo_cpy : STD_LOGIC_VECTOR(22+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(22+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(22 - 1 downto 0);
    variable tmp_fu_105_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(22 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(22 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(22 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_15(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := x_read;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(22-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(22-1-unsigned(ap_const_lv32_15(5-1 downto 0)));
            for tmp_fu_105_p4_i in 0 to 22-1 loop
                v0_cpy(tmp_fu_105_p4_i) := x_read(22-1-tmp_fu_105_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(22-1 downto 0)))));
        res_mask := res_mask(22-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_105_p4 <= resvalue(22-1 downto 0);
    end process;

    trunc_ln7_1_fu_167_p1 <= sub_ln7_fu_135_p2(5 - 1 downto 0);
    trunc_ln7_2_fu_343_p1 <= tmp_2_fu_127_p3(11 - 1 downto 0);
    trunc_ln7_3_fu_386_p4 <= add_ln7_3_fu_307_p2(52 downto 1);
    trunc_ln7_fu_141_p1 <= sub_ln7_fu_135_p2(22 - 1 downto 0);
    xor_ln7_fu_213_p2 <= (tmp_8_fu_205_p3 xor ap_const_lv1_1);
    zext_ln7_1_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_2_fu_263_p2),64));
    zext_ln7_2_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln7_1_fu_279_p2),64));
    zext_ln7_3_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln7_fu_245_p3),64));
    zext_ln7_4_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln7_1_fu_313_p4),64));
    zext_ln7_5_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln7_3_fu_171_p2),22));
    zext_ln7_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_read),64));
end behav;
